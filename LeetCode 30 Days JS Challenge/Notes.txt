Day - 1
Functions in JS - 
1. Function Syntax - Ex - 

function f(a, b) {
  const sum = a + b;
  return sum;
}
console.log(f(3, 4)); // 7

2. Anonymous Function - Exclude name of the function after function keyword. 
3. Immediately Invoked Function Expression (IIFE)
4. Function Within Functions - Actually create functions within other functions and even return them!
5. Function Hoisting
JavaScript has a feature called hoisting where a function can sometimes be used before it is initialized.
Example ---- > 
function createFunction() {
  return f; // This line is where the function is hoisted. 
  function f(a, b) {
    const sum = a + b;
    return sum;
  }
}


const f = createFunction();
console.log(f(3, 4)); // 7




Arrow Function Syntax - 

const add = (a, b) => a + b;


Arrow Function should not be used in following conditions -> 
1. cannot be used as constructors to create new objects
2. Arrow functions cannot be used as generator functions that use the yield keyword to return multiple values over time.


The yield keyword is used in special functions called generator functions, which can return multiple values over time instead of returning just one value like a normal function.

Ex - 

const gen = function* (genarator)/name (...args)
{
    yield Statement 1 ; 
    yield statement 2 ; 
    .... so on. 
}

Calling the Genarator Function - Genarator function is actually used to return multiple values from the same function. 

gen.next().value ; 
To again get the value from the next gen function we use - 
gen.next().value ; 



Day - 2 - CLOSURE 
In JavaScript, functions have a reference to all variables declared in the same scope as well as any outer scopes. These scopes are known as the function's lexical environment. The combination of the function and it's environment is known as a closure.

Closure is created when function is defined inside another function and the inner function references variable from the outer function's scope. 
When Inner function is returned from the outer function, it retains the reference to the outer function's scope and can continue to access these variables even though it has finished executing. 

A closure Function can be used in following concepts - 
1. Private Variables and Functions 

Ex - 

const makeCounter = () => {
    let cnt = 0 ;

    return () => {
        cnt++ ;
        console.log(cnt) ;
    }
}

let counter = makeCounter(); 
counter() ; // logs 1  
counter() ; // logs 2 
counter() ; // logs 3



2. Partial Functions 

Ex - 

function add(x) {
    return function(y) {
        return x + y ; 
    }
}

let add5 = add(5); 
console.log(add5(3)) ; // Output - 8 


3. For Preserving States in Asynchrnous Code - 

Ex - 

const animate = (element , from , to , duration) => {
    let start = performance.now ; 

    const update = () => {

        let time = performance.now() - start ;
        let progress = time/duration ; 
        let value = from + (to - from) * progress; 

        element.style.left = value + 'px' ; 

        if(progress < 1)
        {
            requestAnimationFrame(update) ;
        }
    }
    requestAnimationFrame(update) ;
}



let element = document.getElementById('my-element') ; 
animate(element , 0 , 100 , 1000); 


Day - 3 - Closure Extended - 

Object Declaration - 
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

Now, in this declaration of object we can also return functions also like the today's function. 
Functions in JS are mainly of two types - 
- Traditional Functions 
and 
- Arrow Functions 

Day - 3  Solution Using Class Also - 

class Counter {
    constructor(init){
        this.init = init ; 
        this.count = init; 
    }
    increment() {
        this.count += 1; 
        return this.count ; 
    }
    decrement() {
        this.count -= 1 ; 
        return this.count ; 
    }
    reset () {
        this.count = this.init ; 
        return this.count ; 
    }
}

var createCounter = function(init){
    return new Counter(init) ; 
}; 


Day - 4 - Different Methods to Solve A Problem. 

Before that learn about - Callbacks 
A callback is defined as a function passed as an argument to another function. They are critical to understand as they are used frequently in almost any JavaScript codebase and are essential to writing reusable code.

1. Using a loop with containerised container. 

var map = function(arr , fn) {
    const transformaedArray = [] ; 

    for(let i = 0 ; i < arr.size() ; i++)
    {
        transformaedArray[i] = fn(arr[i] , i) ; 
    }
    return transformaedArray ; 
}


2. Using a forEach Method -  

var map = function(arr , fn) {
    const transformaedArray = [] ;

    forEach((element , index) => {
        transformaedArray[i] = fn(arr[i] , i); 
    })

    return transformaedArray ; 
}

3. Using Array Reduce - 
Syntax - array.reduce(function(total, currentValue, currentIndex, arr), initialValue) 

var map = function(arr , fn) {
    return arr.reduce((transformaedArray , element , index) => {
        transformaedArray[i] = fn(element , index ); 
    }, []); 
}

4. Using For Of Loop - 

var map = function(arr , fn) {
    let index = 0 ; 

    for(const index in arr)
    {
        transformaedArray[index] = fn(element , index) ;
        index++ ;
    }
    return transformaedArray ; 
}



DAY - 5 - Callback Function. 

JavaScript has true boolean values of true and false. But you are actually allowed to put any value inside an if statement. That value will be coerced into a boolean based on on it's "truthiness".
All values are considered truthy except the following:

false
All forms of zero, meaning 0, -0 (output of 0/-1), and 0n (output of BigInt(0))
NaN ("Not a Number", one way to get it is with 0/0)
"" (empty string)
null
undefined

Day - 6 - Reduce Transformations Implementation 
JS Loops  

For 
While
Do While 
For IN
For Of
forEach - Have a callback Function as Argument. 

Array.map() - Creates a NEW Array. 
Parameters - 
1. callBackFxn and this Callback function is called with element and index of the array. 
2. this (optional) 

Ex -  
const numbers = [1, 4, 9];
const roots = numbers.map((num) => Math.sqrt(num));

Array.filter() - Provides a shallow copy. 

What is Shallow Copy? 
A shallow copy of an object is a copy whose properties share the same references as those of the source object from which the copy was made. 
As a result, changes in the source or copy result in change of other object too. 

What is Deep Copy ? 

A deep copy of an object is a copy whose properties do not share the same references as those of the source object from which the copy was made. 
As a result, when you change either the source or the copy, you can be assured you're not causing the other object to change too.


JSON.stringify() - Used to Convert the object to a JSON string. 
JSON.parse() - To Convert the string back into a (completely new) JS object. 


Back to Array.filter() - Shallow Copy created. 
Same as Array.map() parameters;


Array.reduce() - executes a user supplied "reducer" callback function on each element of the array by passing in the return value on the preceding element.  
Syntax - 
1. reduce(callBackFxn)
2. reduce(callBackFxn , this) ; 

Here, the callback function is called with - 
accumulator - value resulting from the previous call to callBackFxn. 
currentValue - Value of the Current Element of the Array. 
currentIndex - Index Position of the CurrentElement. 

Another Optional Argument is -
initialVal - If not specified, taken as default as the first element of the Array over which reduce is called. 


Day - 7 - Functions Composition 

Function composition is a concept in functional programming where the output of one function is used as the input of another function. In other words, it's the process of chaining two or more functions together so that the result of one function becomes the input to the next.



Day - 8 - Function INput and Output - 

Functions that modify or extends the behavior of functions are extremely common in JavaScript and are a key concept in functional programming. 
They are very useful for writing elegant, reusable code, and have a variety of use-case -

Throttling - 

Querying the database for results every single time a character is typed could put unnecessary load on the database and the user interface. 
To prevent this, you could employ a technique known as throttling. 

By throttling the function responsible for sending requests to the database, we ensure that only a limited number of requests are sent per second, thereby optimizing system performance.
See - Lodash - Library documentation to learn more - _.throttle(function , [wait=0] , [options={}]); 


Memoize - 

A common optimisation is to never call a pure function with the same inputs twice. 

Avoid Computation by returning the previously cached result. 
Important Concept in Dynamic Programming . 

Time Limit - 
Suppose there exists a process that repeats itself(like syncing data from a database and loading them in a in - memeory cache)
Suppose at any time these asychronous requests failed at a particular time, then our current process will becoeme frozen. 
To guarantee that never happens, we could wrap the asychronous functions used with time limits.



DAY - 9 - Memoization 

A function that modifies a provided function such that the provided function will only be called if the arguments have not been passed before. 
If they have been passed before, it should return the previous output without calling the provided function. This type of optimization is called memoization and is an extremely important example of a higher-order function.



Pure functions - A pure function is defined as function that always returns the same output given the same inputs and doesn't have any side-effects.
A function that is not a pure function such as - date.now() - returns time in unix epoch. If it is memoized then it will give the same result which is incorrect. 
Similarly, uploading data to the database will also results in the same. 


Memoization - Use cases in Web Development - 

Caching Website Files - A large website often consists of many JavaScript files which are dynamically downloaded when a user visits different pages. A pattern is sometimes employed where the filename is based on a hash of the file's content. That way, when the web browser requests a filename that was already requested before, it can load the file locally from disk rather than have to download it again.
React Components - React is a highly popular library for building user interfaces, especially for single-page applications. 
                    One of its core principles is the idea of breaking down your application into separate components. Each of these components is responsible for rendering a distinct part of the app's HTML.
For Ex - Title Component in React will not be needed to call again and again. 

Caching API Calls - Through - Example - 
Suppose you had a function that sends a network request to an API to access key-value pairs in a database.
getValueMemoized will only make a network request once for each key, potentially greatly improving performance.


A potential downside of memoizing network requests is the risk of data staleness. 
To handle this:

1. Always send a request to the API asking if the value was changed.
2. Use a WebSocket to subscribe to changes in the values in the database.
3. Give the value Time Until Expiration so that at least the user won't see data that's TOO outdated.



Memoization in Algorithms 

A classic application of memoization is in dynamic programming where you break up a problem into sub-problems.

A classic example is of  - Fibonacci Sequence 
const cache = new Map();
function fib(n) {
  if (i <= n) return n;
  if (cache.has(n)) {
    return cache.get(n);
  }
  const result = fib(n - 1) + fib(n - 2);
  cache.set(n, result);
  return result;
}
fib(100); // Solves almost instantly



Day - 10 - Currying A Function 

REST Parameters - In JS - 
Rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.
Variadic Functions - Those Functions which will take a variable number of parameters. 
Syntax - REST Parameters 

function f(a, b, ...theArgs) {
  // …
}

A function definition can only have one rest parameter, and the rest parameter must be the last parameter in the function definition.
The rest parameter is not counted towards the function's length property.


the third argument, manyMoreArgs, will be an array that contains the third, fourth, fifth, sixth, …, nth — as many arguments as the user specifies.
function myFun(a, b, ...manyMoreArgs) {
  console.log("a", a);
  console.log("b", b);
  console.log("manyMoreArgs", manyMoreArgs);
}




Currying is a powerful technique in functional programming that transforms a function with multiple arguments into a sequence of functions. 
It allows you to create flexible and reusable code by enabling partial application of function arguments.

Currying in JavaScript has several practical applications that can help improve code readability, maintainability, and reusability.

Some practical use cases of currying:

1. Reusable utility functions: Currying can help create reusable utility functions that can be easily customized for specific use cases. Currying allows you to create a function that returns another function with a partially applied argument. In this case, we have a curried add function that takes two arguments, a and b. When you call add with a single argument, it returns a new function that takes the second argument b and adds it to the initially provided a.

const add = a => b => a + b;

// Create a new function 'add5' by calling the curried 'add' function with the value 5.
// The returned function will take a single argument 'b' and add it to 5.
const add5 = add(5);

// Now, when we call 'add5' with a value (e.g., 3), it adds 5 to the input value, resulting in 8.
const result = add5(3); // 8

2. Event handling: In event-driven programming, currying can be used to create event handlers with specific configurations, while keeping the core event handling function generic.
3. Customizing API calls: Currying can help create more specific API calls based on a generic API call function.