Day - 1
Functions in JS - 
1. Function Syntax - Ex - 

function f(a, b) {
  const sum = a + b;
  return sum;
}
console.log(f(3, 4)); // 7

2. Anonymous Function - Exclude name of the function after function keyword. 
3. Immediately Invoked Function Expression (IIFE)
4. Function Within Functions - Actually create functions within other functions and even return them!
5. Function Hoisting
JavaScript has a feature called hoisting where a function can sometimes be used before it is initialized.
Example ---- > 
function createFunction() {
  return f; // This line is where the function is hoisted. 
  function f(a, b) {
    const sum = a + b;
    return sum;
  }
}


const f = createFunction();
console.log(f(3, 4)); // 7




Arrow Function Syntax - 

const add = (a, b) => a + b;


Arrow Function should not be used in following conditions -> 
1. cannot be used as constructors to create new objects
2. Arrow functions cannot be used as generator functions that use the yield keyword to return multiple values over time.


The yield keyword is used in special functions called generator functions, which can return multiple values over time instead of returning just one value like a normal function.

Ex - 

const gen = function* (genarator)/name (...args)
{
    yield Statement 1 ; 
    yield statement 2 ; 
    .... so on. 
}

Calling the Genarator Function - Genarator function is actually used to return multiple values from the same function. 

gen.next().value ; 
To again get the value from the next gen function we use - 
gen.next().value ; 



Day - 2 - CLOSURE 
In JavaScript, functions have a reference to all variables declared in the same scope as well as any outer scopes. These scopes are known as the function's lexical environment. The combination of the function and it's environment is known as a closure.

Closure is created when function is defined inside another function and the inner function references variable from the outer function's scope. 
When Inner function is returned from the outer function, it retains the reference to the outer function's scope and can continue to access these variables even though it has finished executing. 

A closure Function can be used in following concepts - 
1. Private Variables and Functions 

Ex - 

const makeCounter = () => {
    let cnt = 0 ;

    return () => {
        cnt++ ;
        console.log(cnt) ;
    }
}

let counter = makeCounter(); 
counter() ; // logs 1  
counter() ; // logs 2 
counter() ; // logs 3



2. Partial Functions 

Ex - 

function add(x) {
    return function(y) {
        return x + y ; 
    }
}

let add5 = add(5); 
console.log(add5(3)) ; // Output - 8 


3. For Preserving States in Asynchrnous Code - 

Ex - 

const animate = (element , from , to , duration) => {
    let start = performance.now ; 

    const update = () => {

        let time = performance.now() - start ;
        let progress = time/duration ; 
        let value = from + (to - from) * progress; 

        element.style.left = value + 'px' ; 

        if(progress < 1)
        {
            requestAnimationFrame(update) ;
        }
    }
    requestAnimationFrame(update) ;
}



let element = document.getElementById('my-element') ; 
animate(element , 0 , 100 , 1000); 


Day - 3 - Closure Extended - 

Object Declaration - 
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

Now, in this declaration of object we can also return functions also like the today's function. 
Functions in JS are mainly of two types - 
- Traditional Functions 
and 
- Arrow Functions 

Day - 3  Solution Using Class Also - 

class Counter {
    constructor(init){
        this.init = init ; 
        this.count = init; 
    }
    increment() {
        this.count += 1; 
        return this.count ; 
    }
    decrement() {
        this.count -= 1 ; 
        return this.count ; 
    }
    reset () {
        this.count = this.init ; 
        return this.count ; 
    }
}

var createCounter = function(init){
    return new Counter(init) ; 
}; 


Day - 4 - Different Methods to Solve A Problem. 

Before that learn about - Callbacks 
A callback is defined as a function passed as an argument to another function. They are critical to understand as they are used frequently in almost any JavaScript codebase and are essential to writing reusable code.

1. Using a loop with containerised container. 

var map = function(arr , fn) {
    const transformaedArray = [] ; 

    for(let i = 0 ; i < arr.size() ; i++)
    {
        transformaedArray[i] = fn(arr[i] , i) ; 
    }
    return transformaedArray ; 
}


2. Using a forEach Method -  

var map = function(arr , fn) {
    const transformaedArray = [] ;

    forEach((element , index) => {
        transformaedArray[i] = fn(arr[i] , i); 
    })

    return transformaedArray ; 
}

3. Using Array Reduce - 
Syntax - array.reduce(function(total, currentValue, currentIndex, arr), initialValue) 

var map = function(arr , fn) {
    return arr.reduce((transformaedArray , element , index) => {
        transformaedArray[i] = fn(element , index ); 
    }, []); 
}

4. Using For Of Loop - 

var map = function(arr , fn) {
    let index = 0 ; 

    for(const index in arr)
    {
        transformaedArray[index] = fn(element , index) ;
        index++ ;
    }
    return transformaedArray ; 
}



DAY - 5 - Callback Function. 

JavaScript has true boolean values of true and false. But you are actually allowed to put any value inside an if statement. That value will be coerced into a boolean based on on it's "truthiness".
All values are considered truthy except the following:

false
All forms of zero, meaning 0, -0 (output of 0/-1), and 0n (output of BigInt(0))
NaN ("Not a Number", one way to get it is with 0/0)
"" (empty string)
null
undefined



