Some Important Articles that needed to be done - 


https://www.geeksforgeeks.org/c-programming-multiple-choice-questions/ - Complete all Input - Output Sets after studying OOPs concepts well.
Do Solve them as much as possible and revise it continuously. So that I will not commit a simple mistake in it.  



https://www.geeksforgeeks.org/quiz-corner-gq/ 
Do practice each and every topic questions from this resource. This will help in remembering important points. 



For a quick cheatsheet, follow LeetCode - https://leetcode.com/explore/interview/card/cheatsheets/720/resources/ 
LeetCode Cheatsheet is given as a Explore Card. 





INTERVIEW STAGES CHEATSHEET - Interview stages cheat sheet
The following will be a summary of the "Stages of an interview" article. If you have a remote interview, you can print this condensed version and keep it in front of you during the interview.

Stage 1: Introductions

Have a rehearsed 30-60 second introduction regarding your education, work experience, and interests prepared.
Smile and speak with confidence.
Pay attention when the interviewer talks about themselves and incorporate their work into your questions later.


Stage 2: Problem statement

Paraphrase the problem back to the interviewer after they have read it to you.
Ask clarifying questions about the input such as the expected input size, edge cases, and invalid inputs.
Quickly walk through an example test case to confirm you understand the problem.



Stage 3: Brainstorming DS&A

Always be thinking out loud.
Break the problem down: figure out what you need to do, and think about what data structure or algorithm can accomplish it with a good time complexity.
Be receptive to any comments or feedback from the interviewer, they are probably trying to hint you towards the correct solution.
Once you have an idea, before coding, explain your idea to the interviewer and make sure they understand and agree that it is a reasonable approach.

Stage 4: Implementation

Explain your decision making as you implement. When you declare things like sets, explain what the purpose is.
Write clean code that conforms to your programming language's conventions.
Avoid writing duplicate code - use a helper function or for loop if you are writing similar code multiple times.
If you are stuck, don't panic - communicate your concerns with your interviewer.
Don't be scared to start with a brute force solution (while acknowledging that it is brute force), then improving it by optimizing the "slow" parts.
Keep thinking out loud and talk with your interviewer. It makes it easier for them to give you hints.



Stage 5: Testing & debugging

When walking through test cases, keep track of the variables by writing at the bottom of the file, and continuously update them. Condense trivial parts like creating a prefix sum to save time.
If there are errors and the environment supports running code, put print statements in your algorithm and walk through a small test case, comparing the expected value of variables and the actual values.
Be vocal and keep talking with your interviewer if you run into any problems.



Stage 6: Explanations and follow-ups

Questions you should be prepared to answer:

Time and space complexity, average and worst case.
Why did you choose this data structure, algorithm, or logic?
Do you think the algorithm could be improved in terms of complexity? If they ask you this, then the answer is usually yes, especially if your algorithm is slower than O(n).


Stage 7: Outro

Have questions regarding the company prepared.
Be interested, smile, and ask follow-up questions to your interviewers responses.
